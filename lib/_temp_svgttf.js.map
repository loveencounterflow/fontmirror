{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_temp_svgttf.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n### TAINT pending code cleanup ###\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'FONTMIRROR/_TEMP_SVGTTF'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n# exec                      = ( require 'util' ).promisify ( require 'child_process' ).exec\nspawn_sync                = ( require 'child_process' ).spawnSync\n# CP                        = require 'child_process'\njr                        = JSON.stringify\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  first_of\n  last_of\n  size_of\n  type_of }               = require './types'\n#...........................................................................................................\nOT                        = require 'opentype.js'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@new_font = ( me, source ) ->\n  { fontnick\n    path\n    relpath } = source\n  otjsfont    = @_open_font path, source.relpath\n  if otjsfont? then metrics = @new_metrics otjsfont\n  else              metrics = null\n  return { fontnick, path, relpath, metrics, otjsfont, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_open_font = ( path, relpath ) ->\n  try\n    return OT.loadSync path\n  catch error\n    warn \"^fontmirror@1012^ when trying to open font #{rpr relpath}, an error occurred: #{error.message}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@new_metrics = ( otjsfont ) ->\n  upm             = 4096\n  source_upm      = otjsfont.unitsPerEm\n  # upm             = 1000\n  path_precision  = 0\n  advance_factor  = upm / source_upm\n  return { upm, source_upm, path_precision, advance_factor, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@svg_path_from_cid = ( otjsfont, cid ) ->\n  pathdata    = @svg_pathdata_from_cid otjsfont, cid\n  glyph       = String.fromCodePoint cid\n  cid_hex     = \"0x#{cid.toString 16}\"\n  return \"<!-- #{cid_hex} #{glyph} --><path d='#{pathdata}'/>\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_otjsglyph_from_glyph = ( otjsfont, glyph ) ->\n  return otjsfont.glyphs.get 0 if glyph is 'fallback'\n  R = otjsfont.charToGlyph glyph\n  return if R.unicode? then R else null\n\n#-----------------------------------------------------------------------------------------------------------\n@_quickscale = ( path_obj, scale_x, scale_y = null ) ->\n  scale_y ?= scale_x\n  for command in path_obj.commands\n    for key, value of command\n      switch key\n        when 'x', 'x1', 'x2' then command[ key ] *= scale_x\n        when 'y', 'y1', 'y2' then command[ key ] *= scale_y\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_otjsglyph_and_pathdata = ( me, font, cid, glyph ) ->\n  # validate.positive_integer cid\n  { metrics, }  = font\n  return null unless ( otjsglyph = @_otjsglyph_from_glyph font.otjsfont, glyph )?\n  path_obj      = otjsglyph.getPath 0, 0, metrics.upm\n  return null if path_obj.commands.length is 0\n  @_quickscale path_obj, 1, -1\n  pathdata      = path_obj.toPathData metrics.path_precision\n  advance       = ( otjsglyph.advanceWidth * metrics.advance_factor ).toFixed metrics.path_precision\n  return { otjsglyph, advance, pathdata, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@walk_font_outlines = ( me, source ) ->\n  ### Yield one commented line to show the path to the file cached; this also makes sure a file will exist\n  in the cache even if no outlines were obtained so we can avoid re-openening the font whenever cache\n  is amended without `force_overwrite`: ###\n  { fontnick\n    path\n    relpath }                 = source\n  #.........................................................................................................\n  progress_count  = 10000 ### output progress whenever multiple of this number reached ###\n  font            = @new_font me, source\n  metrics         = font.metrics\n  description     = { key: '^new-font', fontnick, path, metrics, }\n  yield \"#{jr description}\\n\"\n  return unless font.metrics?\n  #.........................................................................................................\n  fallback_pathdata = null\n  if ( d = @_get_otjsglyph_and_pathdata me, font, null, 'fallback' )?\n    help '^55562^', 'fallback pathdata', fontnick, d.pathdata[ .. 80 ]\n    fallback_pathdata = d.pathdata\n  else\n    warn '^55562^', 'no fallback pathdata', fontnick\n  #.........................................................................................................\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  cids = []\n  # cids = [ cids..., [ 0x4e00 .. 0x4e03 ]..., ]\n  # cids = [ cids..., 0x9fff, ]\n  # cids = [ cids..., 0xfffd, 0xfffe, 0xffff, ]\n\n  # cids = [ cids..., [ 0x01 .. 0xff ]..., ]\n  # cids = [ cids..., 0x004e00, ] # A:uc0---:004e00:一\n  # cids = [ cids..., 0x004e01, ] # A:uc0---:004e01:丁\n  # cids = [ cids..., 0x004e02, ] # A:uc0---:004e02:丂\n  # cids = [ cids..., 0x004e03, ] # A:uc0---:004e03:七\n  # cids = [ cids..., 0x004e04, ] # A:uc0---:004e04:丄\n  # cids = [ cids..., 0x004e05, ] # A:uc0---:004e05:丅\n  # cids = [ cids..., 0x004e07, ] # A:uc0---:004e07:万\n  # cids = [ cids..., 0x004df0, ] # A:ucyijg:004df0:䷰\n  # cids = [ cids..., 0x004df1, ] # A:ucyijg:004df1:䷱\n  # cids = [ cids..., 0x004df2, ] # A:ucyijg:004df2:䷲\n  # cids = [ cids..., 0x00243f, ] # A:u-----:00243f:\n  # cids = [ cids..., 0x00245f, ] # A:u-----:00245f:\n  # cids = [ cids..., 0x00fdd0, ] # A:u-----:00fdd0:\n  # cids = [ cids..., 0x00fdd1, ] # A:u-----:00fdd1:\n  # cids = [ cids..., 0x00fdd2, ] # A:u-----:00fdd2:\n  # cids = [ cids..., 0x00fffd, ] # A:u-----:00fffd:�\n  # cids = [ cids..., 0x00fffe, ] # A:u-----:00fffe:\n  # cids = [ cids..., 0x00ffff, ] # A:u-----:00ffff:\n  # cids = [ cids..., 0x030000, ] # A:u-----:030000:\n  # cids = [ cids..., 0x10fffe, ] # A:u-----:10fffe:\n  # cids = [ cids..., 0x10ffff, ] # A:u-----:10ffff:\n  # cids = [ cids..., 0x009fff, ] # A:uc0---:009fff:\n  cids = [ 0x4e00 .. 0x9fff ]\n  cids = [ ( new Set cids )..., ]\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  #.........................................................................................................\n  for cid in cids\n    cid_hex       = '0x' + ( cid.toString 16 ).padStart 4, '0'\n    glyph         = String.fromCodePoint cid\n    d             = @_get_otjsglyph_and_pathdata me, font, cid, glyph\n    continue if ( not d? ) or ( d.pathdata is fallback_pathdata )\n    pathdata_json = jr d.pathdata\n    advance       = d.advance\n    #.......................................................................................................\n    if isa.nan advance\n      warn \"^ucdb@3332^ illegal advance for #{font.nick} #{cid_hex}: #{rpr advance}; setting to UPM\"\n      advance = font.metrics.upm\n    #.......................................................................................................\n    whisper '^ucdb@1013^', me.outline_count - 1 if ( me.outline_count++ % progress_count ) is 0\n    yield \"#{cid_hex},#{glyph},#{advance},#{pathdata_json}\\n\"\n  #.........................................................................................................\n  return null\n\n\n\n"
  ]
}