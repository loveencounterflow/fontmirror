{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,UAAA,EAAA,EAAA,EAAA,UAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,eAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;IAAA,oBAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B,EAlBA;;;;;;;;EA0BA,IAAC,CAAA,KAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,IAAC,CAAA,KAH7B,EA3BA;;;EAgCA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,eAAA,GAA4B,OAAA,CAAQ,mBAAR;;EAC5B,mBAAA,GAA4B,yBAnC5B;;;;;EAuCA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,EAAF,EAAM,IAAN,CAAA;WAAgB,GAAG,CAAC,aAAJ,CAAkB,IAAlB,EAAwB,EAAxB;EAAhB,EAvC3B;;;EA0CA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,WAAF,EAAe,WAAf,EAA4B,eAA5B,CAAA;AACX,QAAA,YAAA,EAAA,aAAA,EAAA;IAAE,WAAA,GAAgB,IAAI,CAAC,OAAL,CAAa,WAAb;IAChB,WAAA,GAAgB,IAAI,CAAC,OAAL,CAAa,WAAb;IAChB,aAAA,GAAgB;MAAE,SAAA,EAAW,IAAb;MAAmB,MAAA,EAAQ,IAA3B;MAAiC,MAAA,EAAQ;IAAzC;IAChB,YAAA,GAAgB,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,CAAA,QAAA,CAAA,CAAW,mBAAX,CAAA,CAAA,CAAvB;IAChB,IAAA,CAAK,CAAA,mCAAA,CAAA,CAAsC,YAAtC,CAAA,CAAL,EAJF;;IAME,IAAG,GAAG,CAAC,wBAAJ,CAA6B,WAA7B,CAAH;MACE,YAAA,GAAe,CAAE,WAAF,EADjB;KAAA,MAEK,IAAG,GAAG,CAAC,0BAAJ,CAA+B,WAA/B,CAAH;MACH,YAAA,GAAe,IAAI,CAAC,IAAL,CAAU,YAAV,EAAwB,aAAxB,EADZ;KAAA,MAAA;MAGH,MAAM,IAAI,KAAJ,CAAU,CAAA,uDAAA,CAAA,CAA0D,GAAA,CAAI,WAAJ,CAA1D,CAAA,CAAV,EAHH;KARP;;IAaE,KAAO,GAAG,CAAC,0BAAJ,CAA+B,WAA/B,CAAP;MACE,MAAM,IAAI,KAAJ,CAAU,CAAA,uDAAA,CAAA,CAA0D,GAAA,CAAI,WAAJ,CAA1D,CAAA,CAAV,EADR;;AAGA,WAAO,CAAA;;MAAE,WAAF;MAAe,WAAf;MAA4B,YAA5B;MAA0C,eAA1C;MAA2D,aAAA,EAAe;IAA1E;EAjBE,EA1CX;;;EA8DA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,EAAF,EAAM,WAAN,CAAA;WAAuB,GAAG,CAAC,wBAAJ,CAA6B,WAA7B;EAAvB,EA9Dd;;;EAiEA,IAAC,CAAA,mBAAD,GAAuB,MAAA,QAAA,CAAE,WAAF,EAAe,WAAf,EAA4B,eAA5B,CAAA,EAAA;;;;;AACvB,QAAA,YAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,MAAA,EAAA;IAEE,EAAA,GAAK,IAAC,CAAA,OAAD,CAAS,WAAT,EAAsB,WAAtB,EAAmC,eAAnC;IAEL,YAAA,GAAe,KAJjB;;;;;;;;;;;;;;;;;;;;IAwBE,YAAA,GAAe,CAAA;;;4BAAA;IAMf,IAAG,oBAAH;MACE,YAAA,GAAe,YAAY,CAAC,KAAb,CAAmB,KAAnB;MACf,YAAA,GAAe,YAAY,CAAC,MAAb,CAAoB,QAAA,CAAE,CAAF,CAAA;eAAS,CAAA,KAAO;MAAhB,CAApB,EAFjB;;AAIA;;IAAA,KAAA,qCAAA;;MACE,QAAA,GAA8B,IAAI,CAAC,QAAL,CAAc,WAAd;MAC9B,QAAA,GAA8B,eAAe,CAAC,MAAhB,CAAuB,QAAvB;MAE9B,IAAY,sBAAA,iBAA8B,cAAZ,cAA9B;;AAAA,iBAAA;;MAEA,cAAA,GAAkB,IAAI,CAAC,QAAL,CAAc,OAAO,CAAC,GAAR,CAAA,CAAd,EAA6B,WAA7B;MAClB,MAAA,GAAkB;QAAE,IAAA,EAAM,WAAR;QAAqB,OAAA,EAAS,cAA9B;QAA8C;MAA9C;MAClB,YAAA,GAAkB,IAAC,CAAA,uBAAD,CAAyB,EAAzB,EAA6B,MAAM,CAAC,IAApC;MAClB,WAAA,GAAkB,IAAI,CAAC,IAAL,CAAU,EAAE,CAAC,WAAb,EAA0B,YAA1B;MAClB,IAAG,IAAC,CAAA,UAAD,CAAY,EAAZ,EAAgB,WAAhB,CAAH;QACE,IAAG,CAAI,EAAE,CAAC,eAAV;UACE,IAAA,CAAK,CAAA,aAAA,CAAA,CAAgB,YAAhB,EAAA,CAAA,CAAgC,MAAM,CAAC,QAAvC,CAAA,CAAL;AACA,mBAFF;;QAGA,IAAA,CAAK,CAAA,aAAA,CAAA,CAAgB,YAAhB,EAAA,CAAA,CAAgC,MAAM,CAAC,QAAvC,CAAA,CAAL,EAJF;OAAA,MAAA;QAME,IAAA,CAAK,CAAA,aAAA,CAAA,CAAgB,YAAhB,EAAA,CAAA,CAAgC,MAAM,CAAC,QAAvC,CAAA,CAAL,EANF;;MAOA,MAAM,IAAC,CAAA,oBAAD,CAAsB,EAAtB,EAA0B,MAA1B,EAAkC,WAAlC;IAjBR;AAkBA,WAAO;EArDc,EAjEvB;;;;;EA6HA,IAAA,GAAO;;EACD;IAAN,MAAA,WAAA,QAAyB,SAAzB,CAAA;;;;AAIoE,6CAIlE,WAAa,CAAE,SAAS,IAAX,CAAA;aACX,CAAA;QACA,IAAC,CAAA,GAAD,GAAU,OAAA,CAAQ,OAAR;QACV,IAAC,CAAA,GAAD,GAAU,OAAA,CAAQ,OAAR;QACV,IAAC,CAAA,IAAD,GAAU,OAAA,CAAQ,QAAR;QACV,IAAC,CAAA,KAAD,GAAU,OAAA,CAAQ,mBAAR;QACV,IAAC,CAAA,KAAD,GAAU,OAAA,CAAQ,SAAR;QACV,IAAkB,cAAlB;UAAA,IAAC,CAAA,MAAD,CAAQ,MAAR,EAAA;;MAPW;;IARf;;IACE,UAAC,CAAA,OAAD,CAAS,IAAT,EAA4C;MAAE,SAAA,EAAW;IAAb,CAA5C;;IACA,UAAC,CAAA,OAAD,CAAW,OAAA,CAAQ,kBAAR,CAAX,EAA4C;MAAE,SAAA,EAAW;IAAb,CAA5C;;IACA,UAAC,CAAA,OAAD,CAAW,OAAA,CAAQ,qBAAR,CAAX,EAA4C;MAAE,SAAA,EAAW;IAAb,CAA5C;;IACA,UAAC,CAAA,OAAD,CAAW,OAAA,CAAQ,gBAAR,CAAX,EAA4C;MAAE,SAAA,EAAW;IAAb,CAA5C;;;;;;EAaF,MAAM,CAAC,OAAP,GAAiB,UAAA,GAAa,IAAI,UAAJ,CAAA,EA/I9B;;;EAoJA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAAG,UAAU,CAAC,GAAX,CAAA;IAAH,CAAA,IAAlC;;AApJA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n# { walk_cids_in_cid_range\n#   cwd_abspath\n#   cwd_relpath\n#   here_abspath\n#   _drop_extension\n#   project_abspath }       = require './helpers'\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\nglob                      = require 'glob'\nMultimix                  = require 'multimix'\nTEXFONTNAMESAKE           = require './texfontnamesake'\nfontfile_extensions       = 'otf|ttf|woff|woff2|ttc'\n# 'eot|svg'\n\n#-----------------------------------------------------------------------------------------------------------\n@_content_hash_from_path = ( me, path ) -> CND.id_from_route path, 17\n\n#-----------------------------------------------------------------------------------------------------------\n@new_job = ( source_path, target_path, force_overwrite ) ->\n  source_path   = PATH.resolve source_path\n  target_path   = PATH.resolve target_path\n  glob_settings = { matchBase: true, follow: true, nocase: true, }\n  glob_pattern  = PATH.join source_path, \"/**/*.+(#{fontfile_extensions})\"\n  help \"^fontmirror@4452^ matching against #{glob_pattern}\"\n  #.........................................................................................................\n  if isa.fontmirror_existing_file source_path\n    source_paths = [ source_path, ]\n  else if isa.fontmirror_existing_folder source_path\n    source_paths = glob.sync glob_pattern, glob_settings\n  else\n    throw new Error \"^445552^ expected path to existing file or folder, got #{rpr source_path}\"\n  #.........................................................................................................\n  unless isa.fontmirror_existing_folder target_path\n    throw new Error \"^fontmirror@445^ expected path to existing folder, got #{rpr target_path}\"\n  #.........................................................................................................\n  return { source_path, target_path, source_paths, force_overwrite, outline_count: 0, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_is_cached = ( me, target_path ) -> isa.fontmirror_existing_file target_path\n\n#-----------------------------------------------------------------------------------------------------------\n@cache_font_outlines = ( source_path, target_path, force_overwrite ) ->\n  ### source must be an existing font file or a directory of font files; target must be an existing\n  directory ###\n  me = @new_job source_path, target_path, force_overwrite\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  XXX_excludes = null\n  # andːregularːotf     !!! intentional fallback glyph font\n  # andːregularːttf     !!! intentional fallback glyph font\n  # lastːresortːttf     !!! intentional fallback glyph font\n  #\n  # �￾￿￯\n  # '�￾￿' 0xfffd, 0xfffe, 0xffff\n  # '﷐﷑﷒﷓﷔﷕﷖﷗﷘﷙﷚﷛﷜﷝﷞﷟﷠﷡﷢﷣﷤﷥﷦﷧﷨﷩﷪﷫﷬﷭﷮﷯' 0xfdd0..0xfdef non-characters\n  # '鿿' 0x9fff unassigned\n  # dejaːvuːsansːmonoːboldːobliqueːttf\n  # iosevkaːslabːthinːttf\n  # thːtshynːpːoneːttf\n  # wenːyueːguːdianːmingːchaoːtiːncːwːfiveːːoneːotf has fallback image? at 乸, but correctly missing glyphs othwerwise\n    # babelːstoneːhanːttf\n    # dejaːvuːsansːmonoːboldːobliqueːttf\n    # iosevkaːslabːthinːttf\n    # sunːextaːttf\n    # thːtshynːpːoneːttf\n    # thːtshynːpːoneːttf\n    # wenːyueːguːdianːmingːchaoːtiːncːwːfiveːːoneːotf\n  XXX_excludes = \"\"\"\n    andːregularːotf\n    andːregularːttf\n    lastːresortːttf\n    droidːsansːfallbackːfullːttf\n    \"\"\"\n  if XXX_excludes?\n    XXX_excludes = XXX_excludes.split /\\s+/\n    XXX_excludes = XXX_excludes.filter ( x ) -> x isnt ''\n  ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  for source_path in me.source_paths\n    filename                    = PATH.basename source_path\n    fontnick                    = TEXFONTNAMESAKE.escape filename\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    continue if XXX_excludes? and fontnick in XXX_excludes\n    ### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n    source_relpath  = PATH.relative process.cwd(), source_path\n    source          = { path: source_path, relpath: source_relpath, fontnick, }\n    content_hash    = @_content_hash_from_path me, source.path\n    target_path     = PATH.join me.target_path, content_hash\n    if @_is_cached me, target_path\n      if not me.force_overwrite\n        help \"skipping:    #{content_hash} #{source.fontnick}\"\n        continue\n      urge \"overwriting: #{content_hash} #{source.fontnick}\"\n    else\n      info \"new:         #{content_hash} #{source.fontnick}\"\n    await @_write_font_outlines me, source, target_path\n  return null\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Fontmirror extends Multimix\n  @include MAIN,                              { overwrite: false, }\n  @include ( require './outliner.mixin' ),    { overwrite: false, }\n  @include ( require './cachewalker.mixin' ), { overwrite: false, }\n  @include ( require './_temp_svgttf' ),      { overwrite: false, } ### !!!!!!!!!!!!!!!!!!!!!!!!!!! ###\n  # @extend MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( target = null ) ->\n    super()\n    @CLI    = require './cli'\n    @CFG    = require './cfg'\n    @TAGS   = require './tags'\n    @NICKS  = require './texfontnamesake'\n    @LINKS  = require './links'\n    @export target if target?\n\nmodule.exports = FONTMIRROR = new Fontmirror()\n\n\n\n############################################################################################################\nif require.main is module then do => FONTMIRROR.cli()\n\n\n"
  ]
}