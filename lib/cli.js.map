{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cli.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR/CLI'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n# { walk_cids_in_cid_range\n#   cwd_abspath\n#   cwd_relpath\n#   here_abspath\n#   _drop_extension\n#   project_abspath }       = require './helpers'\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  defaults\n  type_of }               = types\n\n\n#-----------------------------------------------------------------------------------------------------------\n@cli = -> new Promise ( done ) =>\n  FONTMIRROR  = require '..'\n  app         = require 'commander'\n  has_command = false\n  #.........................................................................................................\n  app\n    .name     FONTMIRROR.CFG.name\n    .version  FONTMIRROR.CFG.version\n  #.........................................................................................................\n  app\n    .command 'cfg'\n    .description \"show current configuration values\"\n    .action ( source_path, d ) =>\n      has_command = true\n      FONTMIRROR.CFG.show_cfg()\n      done()\n  #.........................................................................................................\n  app\n    .command 'source [source_path]'\n    .description \"set or get location of source fonts\"\n    .action ( source_path, d ) =>\n      has_command = true\n      source_path = PATH.resolve source_path if source_path?\n      await FONTMIRROR.CFG.set_or_get 'source_path', source_path, true\n      done()\n  #.........................................................................................................\n  app\n    .command 'target [target_path]'\n    .description \"set or get location where tagged links and outlines are to be stored\"\n    .action ( target_path, d ) =>\n      has_command = true\n      target_path = PATH.resolve target_path if target_path?\n      await FONTMIRROR.CFG.set_or_get 'target_path', target_path, true\n      done()\n  #.........................................................................................................\n  app\n    .command 'link-all-sources'\n    .description \"rewrite links to fonts in target/all\"\n    .option '-d --dry',     \"show what links would be written\"\n    .option '-q --quiet',   \"only report totals\"\n    .action ( d ) =>\n      has_command = true\n      me          = @new_tagger d\n      await FONTMIRROR.LINKS.link_all_sources me\n      done()\n  #.........................................................................................................\n  app\n    .command 'refresh-tags'\n    .description \"rewrite tagged links as described in target/cfg/tags.txt\"\n    .option '-d --dry',     \"show what links would be written\"\n    .option '-q --quiet',   \"only report totals\"\n    .action ( d ) =>\n      has_command = true\n      me          = FONTMIRROR.CFG.new_tagger d\n      debug '^33653^', me; process.exit 1\n      await FONTMIRROR.TAGS.refresh me\n      done()\n  #.........................................................................................................\n  app\n    .command 'cache-outlines [tags]'\n    .description \"read all outlines from fonts and store them in target/outlines\"\n    .option '-f --force', \"force overwrite existing outline files\"\n    .action ( d ) =>\n      has_command     = true\n      force_overwrite = d.force ? false\n      info '^33332^', \"cache\", force_overwrite\n      # await FONTMIRROR.cache_font_outlines source_path, target_path, force_overwrite\n      done()\n  ###\n  #.........................................................................................................\n  app\n    .command 'sync'\n    .action ( d ) =>\n      has_command     = true\n      sync_command()\n      help 'ok'\n      done()\n  #.........................................................................................................\n  app\n    .command 'async'\n    .action ( d ) =>\n      has_command     = true\n      await async_command()\n      help 'ok'\n      done()\n  ###\n  #.........................................................................................................\n  app.parse process.argv\n  unless has_command\n    app.outputHelp ( message ) -> CND.orange message\n  # debug '^33376^', ( k for k of app).sort().join ', '\n  return null\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @cli()\n  # help \"^fontmirror/cli@43892^ terminating.\"\n\n"
  ]
}