{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/experiments/cfgproxy.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B,EAlBA;;;;;;;;EA0BA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,QAHF,EAIE,OAJF,CAAA,GAI4B,KAJ5B,EA3BA;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2DA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAE,aAAF,CAAA,EAAA;;;;;;AAChB,QAAA,CAAA,EAAA;IAKE,CAAA,GACE;MAAA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,IAAV,CAAA;eAAoB;MAApB,CAAL;MACA,GAAA,EAAK,QAAA,CAAE,MAAF,EAAU,IAAV,EAAgB,KAAhB,CAAA;eACH,MAAM,CAAE,IAAF,CAAN,mBAAiB,QAAQ;MADtB;IADL;IAGF,CAAA,GAAI,IAAI,KAAJ,CAAU,CAAA,CAAV,EAAc,CAAd;AACJ,WAAO;EAXO,EA3DhB;;;EAyEA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAA,CAAA;AACR,QAAA;WAAE,GAAA,GAAM,IAAC,CAAA,YAAD,CAAc,CAAA,CAAd;EADA,EAzER;;;EA+EA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,KAAA,CAAA,CAAA,GAAA;aAChC,CAAA,MAAM,IAAC,CAAA,IAAD,CAAA,CAAN;IADgC,CAAA,IAAlC;;AA/EA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR/CFGPROXY'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n# { walk_cids_in_cid_range\n#   cwd_abspath\n#   cwd_relpath\n#   here_abspath\n#   _drop_extension\n#   project_abspath }       = require './helpers'\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  defaults\n  type_of }               = types\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# ### TAINT consider to move this to types module ###\n# key_infos =\n#   source_path:\n#     type:       'fontmirror_existing_folder'\n#     default:    null\n#   target_path:\n#     type:       'fontmirror_existing_folder'\n#     default:    null\n#   extensions:\n#     type:       'fontmirror_fontfile_extensions'\n#     default:    [ 'otf', 'ttf', 'woff', 'woff2', 'ttc', ]\n\n# R.fontnick_sep        = FONTMIRROR.NICKS.partitioner                          # read-only\n# R.glob_fonts          = PATH.join R.source_path, \"**/*.+(#{R.extensions})\"    # read-only\n# R.path_fonts          = R.source_path                                         # read-only; set to link target of join path.path_fmcatalog, sources\n# R.path_fmcatalog      = R.target_path                                         # read-only; set to process.cwd() where not present on command line\n# R.path_all            = PATH.join R.target_path, 'all'                        # read-only\n# R.path_cfg            = PATH.join R.target_path, 'cfg'                        # read-only\n# R.path_cache          = PATH.join R.target_path, 'cache'                      # read-only\n# R.path_tagged         = PATH.join R.target_path, 'tagged'                     # read-only\n# R.path_untagged       = PATH.join R.target_path, 'untagged'                   # read-only\n# R.path_outlines       = PATH.join R.target_path, 'outlines'                   # read-only\n\n#-----------------------------------------------------------------------------------------------------------\n@new_cfgproxy = ( _job_settings ) ->\n  ###\n\n  `cfgproxy`\n\n  ###\n  X =\n    get: ( target, name ) -> 42\n    set: ( target, name, value ) ->\n      target[ name ] = value ? null\n  R = new Proxy {}, X\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ->\n  cfg = @new_cfgproxy { }\n\n\n\n############################################################################################################\nif require.main is module then do =>\n  await @demo()\n\n"
  ]
}