{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outliner.mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR/OUTLINER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\n#...........................................................................................................\n{ isa\n  validate\n  cast\n  type_of }               = require './types'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\n{ jr, }                   = CND\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_XXXXXXXXXXXXX_get_fallback_pathdata = ( me, SVGTTF_font ) ->\n  fontnick  = SVGTTF_font.nick\n  row       = ( me.db.$.first_row me.db.false_fallback_probe_from_fontnick { fontnick, } ) ? null\n  return null unless row?\n  cid       = row.probe.codePointAt 0\n  d         = SVGTTF.glyph_and_pathdata_from_cid SVGTTF_font.metrics, SVGTTF_font.otjsfont, cid\n  return null unless d?\n  return d.pathdata\n\n#-----------------------------------------------------------------------------------------------------------\n@_write_font_outlines = ( me, source, target_path ) -> new Promise ( resolve, reject ) =>\n  ### TAINT decide whether to as sync or async writing, benchmark ###\n  FS.unlinkSync target_path if FS.existsSync target_path\n  source      = @walk_font_outlines me, source\n  line_count  = 0\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push $watch ( d ) -> line_count++\n  # pipeline.push SP.tee_write_to_file path\n  pipeline.push SP.tee_write_to_file_sync target_path\n  pipeline.push $drain =>\n    resolve line_count\n  SP.pull pipeline...\n  return null\n\n\n\n\n\n\n"
  ]
}