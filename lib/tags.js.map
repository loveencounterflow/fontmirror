{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/tags.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,MAAA,EAAA,kBAAA,EAAA,KAAA,EAAA,yBAAA,EAAA,kBAAA,EAAA,wBAAA,EAAA,cAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B,EAlBA;;;;;;;;EA0BA,IAAC,CAAA,KAAD,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,IAAC,CAAA,KAH7B,EA3BA;;;EAgCA,MAAA,GAA4B,OAAA,CAAQ,QAAR,EAhC5B;;;EAkCA,EAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,KAHF,EAIE,MAJF,CAAA,GAI4B,EAAE,CAAC,MAAH,CAAA,CAJ5B,EAnCA;;;;EA0CA,MAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,SAAF,EACE,MADF,CAAA,GAC4B,MAAM,CAAC,MAAP,CAAA,CAD5B;;EAEA,IAAA,GAA4B,MAAA,CAAO,MAAP;;EAC5B,KAAA,GAA4B,MAAA,CAAO,OAAP,EA9C5B;;;;;EAoDA,yBAAA,GAA4B,QAAA,CAAA,CAAA,EAAA;;AAE1B,WAAO,EAAE,CAAC,OAAH,CAAW,QAAA,CAAE,IAAF,CAAA;aAAgB,+BAAJ,IAAoC;IAAhD,CAAX;EAFmB,EApD5B;;;;;EA4DA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAI,OAAJ,CAAY,CAAE,OAAF,CAAA,GAAA;AAC/C,UAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA;MAAE,UAAA,GAAsB,OAAA,CAAQ,IAAR;MACtB,WAAA,GAAsB,UAAU,CAAC,GAAG,CAAC,UAAf,CAA0B,aAA1B;MACtB,WAAA,GAAsB,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,wBAAvB;MACtB,MAAA,GAAsB,EAAE,CAAC,cAAH,CAAkB,WAAlB;MACtB,QAAA,GAAsB,GAJxB;;MAME,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,yBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,wBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,mBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAE,CAAE,UAAF,CAAF,CAAA;eAAsB,OAAA,CAAQ,UAAR;MAAtB,CAAP,CAAd,EAXF;;MAaE,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,aAAO;IAfsC,CAAZ;EAAhB,EA5DnB;;;EA8EA,wBAAA,GAA2B,QAAA,CAAA,CAAA,EAAA;;AAEzB,WAAO,CAAA,CAAE,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;AACX,UAAA,OAAA,EAAA,MAAA,EAAA,GAAA,EAAA,eAAA,EAAA;MAAI,CAAE,eAAF,EACE,GAAA,IADF,CAAA,GACoB,IAAI,CAAC,KAAL,CAAW,KAAX;MACpB,OAAA,GAAoB,IAAI,CAAC,IAAL,CAAU,GAAV;MACpB,KAAO,eAAe,CAAC,UAAhB,CAA2B,GAA3B,CAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,wCAAA,CAAA,CAA2C,GAAA,CAAI,GAAJ,CAA3C,CAAA,CAAV,EADR;;MAEA,IAAG,CAAE,MAAA,GAAS,eAAe,CAAC,QAAhB,CAAyB,GAAzB,CAAX,CAAH;QAAoD,GAAA,GAAM,eAAe,CAAC,OAAhB,CAAwB,IAAxB,EAA8B,EAA9B,EAA1D;OAAA,MAAA;QACoD,GAAA,GAAM,gBAD1D;;aAEA,IAAA,CAAK,SAAA,CAAU,MAAV,EAAkB,CAAE,GAAF,EAAO,MAAP,CAAlB,CAAL;IARO,CAAF;EAFkB,EA9E3B;;;EA2FA,mBAAA,GAAsB,QAAA,CAAA,CAAA,EAAA;;AACtB,QAAA;IACE,CAAA,GAAQ,CAAA;AACR,WAAO,CAAA,CAAE,CAAE,IAAF,CAAF,EAAa,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,UAAA,MAAA,EAAA;MAAI,IAAiB,CAAA,KAAK,IAAtB;AAAA,eAAO,IAAA,CAAK,CAAL,EAAP;;MACA,CAAA,CAAE,GAAF,EAAO,MAAP,CAAA,GAAmB,CAAnB;MACA,IAAG,cAAH;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,sCAAA,CAAA,CAAyC,GAAA,CAAI,GAAJ,CAAzC,CAAA,CAAV,EADR;;MAEA,CAAC,CAAE,GAAF,CAAD,GAAW,CAAE,MAAF;AACX,aAAO;IANW,CAAb;EAHa,EA3FtB;;;;;EA0GA,kBAAA,GAAqB,QAAA,CAAA,CAAA;AACnB,WAAO,CAAA,CAAE,QAAA,CAAE,IAAF,EAAQ,IAAR,CAAA;AACX,UAAA,QAAA,EAAA,IAAA,EAAA;MAAI,CAAE,QAAF,EACE,GAAA,IADF,CAAA,GACoB,IAAI,CAAC,KAAL,CAAW,KAAX;MACpB,IAAA,GAAoB,IAAI,CAAC,IAAL,CAAU,EAAV;MACpB,IAAA,GAAoB,IAAI,CAAC,OAAL,CAAc,KAAd,EAAqB,EAArB;MACpB,IAAA,GAAoB,IAAI,CAAC,KAAL,CAAc,QAAd;aACpB,IAAA,CAAK,SAAA,CAAU,kBAAV,EAA8B,CAAE,QAAF,EAAY,IAAZ,CAA9B,CAAL;IANO,CAAF;EADY,EA1GrB;;;EAoHA,cAAA,GAAiB,QAAA,CAAE,UAAF,CAAA;WAAkB,MAAA,CAAO,QAAA,CAAE,CAAF,CAAA;AAC1C,UAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AACE;;MAAA,KAAA,qCAAA;;QACE,IAAO,uBAAP;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,oCAAA,CAAA,CAAuC,GAAA,CAAI,GAAJ,CAAvC,CAAA,CAAV,EADR;;MADF;AAGA,aAAO;IALiC,CAAP;EAAlB,EApHjB;;;EA4HA,kBAAA,GAAqB,QAAA,CAAE,UAAF,CAAA;AACnB,WAAO,CAAA,CAAE,CAAE,KAAF,CAAF,EAAc,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;MACnB,IAA+D,CAAA,KAAK,KAApE;AAAA,eAAO,IAAA,CAAK,SAAA,CAAU,aAAV,EAAyB;UAAE,KAAA,EAAO;QAAT,CAAzB,CAAL,EAAP;;aACA,IAAA,CAAK,CAAL;IAFmB,CAAd;EADY,EA5HrB;;;EAkIA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,CAAA,GAAA;AAC/C,UAAA,UAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA,WAAA,EAAA;MAAE,QAAQ,CAAC,+BAAT,CAAyC,QAAzC;MACA,UAAA,GAAsB,CAAA,MAAM,IAAC,CAAA,eAAD,CAAiB,QAAjB,CAAN;MACtB,UAAA,GAAsB,OAAA,CAAQ,IAAR,EAFxB;;MAIE,WAAA,GAAsB,UAAU,CAAC,GAAG,CAAC,UAAf,CAA0B,aAA1B;MACtB,WAAA,GAAsB,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,cAAvB,EALxB;;;;;;;;MAaE,MAAA,GAAsB,EAAE,CAAC,cAAH,CAAkB,WAAlB;MACtB,QAAA,GAAsB,GAdxB;;MAgBE,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,yBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,kBAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,cAAA,CAAe,UAAf,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,kBAAA,CAAmB,UAAnB,CAAd,EArBF;;aAuBE,OAAA,CAAQ,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR,CAAR;IAxB6C,CAAZ;EAAhB,EAlInB;;;;;EAgKA,IAAC,CAAA,OAAD,GAAW,QAAA,CAAE,QAAF,CAAA;WAAgB,IAAI,OAAJ,CAAY,KAAA,CAAE,OAAF,CAAA,GAAA;AACvC,UAAA,UAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,MAAA,EAAA;MAAE,KAAA,CAAM,UAAN,EAAkB,QAAlB;MAA4B,OAAO,CAAC,IAAR,CAAa,CAAb;MAC5B,UAAA,GAAsB,OAAA,CAAQ,IAAR;MACtB,WAAA,GAAsB,UAAU,CAAC,GAAG,CAAC,UAAf,CAA0B,aAA1B;MACtB,iBAAA,GAAsB,IAAI,CAAC,IAAL,CAAU,WAAV,EAAuB,KAAvB;MACtB,SAAA,GAAsB,UAAU,CAAC,KAAK,CAAC,mBAAjB,CAAA;MACtB,MAAA,GAAsB,CAAA,MAAM,IAAC,CAAA,eAAD,CAAiB,QAAjB,CAAN;MACtB,QAAA,GAAsB,GANxB;;MAQE,QAAQ,CAAC,IAAT,CAAc,MAAd;MACA,QAAQ,CAAC,IAAT,CAAc,KAAA,CAAA,CAAd;MACA,QAAQ,CAAC,IAAT,CAAc,MAAA,CAAO,QAAA,CAAA,CAAA;eAAG,OAAA,CAAA;MAAH,CAAP,CAAd,EAVF;;MAYE,EAAE,CAAC,IAAH,CAAQ,GAAA,QAAR;AACA,aAAO;IAd8B,CAAZ;EAAhB,EAhKX;;;EAkLA,IAAG,OAAO,CAAC,IAAR,KAAgB,MAAnB;IAAkC,CAAA,CAAA,CAAA,GAAA;aAChC,KAAA,CAAM,QAAN;IADgC,CAAA,IAAlC;;AAlLA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR/TAGS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\n{ assign\n  jr }                    = CND\n# { walk_cids_in_cid_range\n#   cwd_abspath\n#   cwd_relpath\n#   here_abspath\n#   _drop_extension\n#   project_abspath }       = require './helpers'\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\n#...........................................................................................................\nmkdirp                    = require 'mkdirp'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\n#...........................................................................................................\n### TAINT only needed until datoms are implemented in SteamPipes ###\nXXX_PD                    = require 'pipedreams'\n{ new_datom\n  select }                = XXX_PD.export()\nlast                      = Symbol 'last'\nfirst                     = Symbol 'first'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n$skip_comments_and_blanks = ->\n  ### TAINT implement in SteamPipes ###\n  return SP.$filter ( line ) -> not ( line.match /^\\s*#/ )? and not ( line.match /^\\s*$/ )?\n\n\n#===========================================================================================================\n# VOCABULARY\n#-----------------------------------------------------------------------------------------------------------\n@read_vocabulary = ( settings ) -> new Promise ( resolve ) =>\n  FONTMIRROR          = require '..'\n  target_path         = FONTMIRROR.CFG.set_or_get 'target_path'\n  source_path         = PATH.join target_path, 'cfg/tag-vocabulary.txt'\n  source              = SP.read_from_file source_path\n  pipeline            = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push SP.$split()\n  pipeline.push $skip_comments_and_blanks()\n  pipeline.push $split_vocabulary_fields()\n  pipeline.push $collect_vocabulary()\n  pipeline.push $drain ( [ vocabulary ] ) -> resolve vocabulary\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$split_vocabulary_fields = ->\n  ### TAINT show source location on error ###\n  return $ ( line, send ) ->\n    [ tag_with_markup\n      tail... ]       = line.split /\\s+/\n    comment           = tail.join ' '\n    unless tag_with_markup.startsWith '+'\n      throw new Error \"^fontmirror/tags@4543^ not a legal tag: #{rpr tag}\"\n    if ( is_vip = tag_with_markup.endsWith '!' )  then  tag = tag_with_markup.replace /!$/, ''\n    else                                                tag = tag_with_markup\n    send new_datom '^tag', { tag, is_vip, }\n\n#-----------------------------------------------------------------------------------------------------------\n$collect_vocabulary = ->\n  ### TAINT show source location on error ###\n  R     = {}\n  return $ { last, }, ( d, send ) ->\n    return send R if d is last\n    { tag, is_vip, } = d\n    if R[ tag ]?\n      throw new Error \"^fontmirror/tags@4548^ duplicate tag: #{rpr tag}\"\n    R[ tag ] = { is_vip, }\n    return null\n\n\n#===========================================================================================================\n# FONTNICKS AND TAGS\n#-----------------------------------------------------------------------------------------------------------\n$split_tags_fields = ->\n  return $ ( line, send ) ->\n    [ fontnick\n      tail... ]       = line.split /\\s+/\n    tags              = tail.join ''\n    tags              = tags.replace  /\\s/g, ''\n    tags              = tags.split    /(?=\\+)/\n    send new_datom '^tagged-fontnick', { fontnick, tags, }\n\n#-----------------------------------------------------------------------------------------------------------\n$validate_tags = ( vocabulary ) -> $watch ( d ) ->\n  ### TAINT show source location on error ###\n  for tag in d.tags\n    unless vocabulary[ tag ]?\n      throw new Error \"^fontmirror/tags@4549^ unknown tag: #{rpr tag}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n$inject_vocabulary = ( vocabulary ) ->\n  return $ { first, }, ( d, send ) ->\n    return send new_datom '^vocabulary', { value: vocabulary, } if d is first\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@_new_tag_source = ( settings ) -> new Promise ( resolve ) =>\n  validate.fontmirror_cli_command_settings settings\n  vocabulary          = await @read_vocabulary settings\n  FONTMIRROR          = require '..'\n  # source_path         = FONTMIRROR.CFG.set_or_get 'source_path'\n  target_path         = FONTMIRROR.CFG.set_or_get 'target_path'\n  source_path         = PATH.join target_path, 'cfg/tags.txt'\n  # partitioner         = FONTMIRROR.NICKS.partitioner\n  # extensions          = FONTMIRROR.CFG.set_or_get 'extensions'\n  # pattern             = PATH.join source_path, \"/**/*.+(#{extensions})\"\n  # paths               = ( require 'glob' ).sync pattern\n  # paths_by_fontnicks  = {}\n  # links_home          = PATH.join target_path, 'all'\n  # font_count          = 0\n  source              = SP.read_from_file source_path\n  pipeline            = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push SP.$split()\n  pipeline.push $skip_comments_and_blanks()\n  pipeline.push $split_tags_fields()\n  pipeline.push $validate_tags vocabulary\n  pipeline.push $inject_vocabulary vocabulary\n  #.........................................................................................................\n  resolve SP.pull pipeline...\n\n\n#===========================================================================================================\n# REFRESH\n#-----------------------------------------------------------------------------------------------------------\n@refresh = ( settings ) -> new Promise ( resolve ) =>\n  debug '^344772^', settings; process.exit 1\n  FONTMIRROR          = require '..'\n  target_path         = FONTMIRROR.CFG.set_or_get 'target_path'\n  path_to_fontnicks   = PATH.join target_path, 'all'\n  fontnicks           = FONTMIRROR.LINKS._list_all_fontnicks()\n  source              = await @_new_tag_source settings\n  pipeline            = []\n  #.........................................................................................................\n  pipeline.push source\n  pipeline.push $show()\n  pipeline.push $drain -> resolve()\n  #.........................................................................................................\n  SP.pull pipeline...\n  return null\n\n\n############################################################################################################\nif require.main is module then do =>\n  debug '^3332^'\n\n\n"
  ]
}