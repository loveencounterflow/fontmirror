{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/cachewalker.mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'FONTMIRROR/CACHEWALKER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\n#...........................................................................................................\n{ isa\n  validate\n  cast\n  type_of }               = require './types'\n#...........................................................................................................\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\n{ jr, }                   = CND\nglob                      = require 'glob'\nPATH                      = require 'path'\nline_pattern              = ///\n  ^ 0x\n    (?<cid_hex>   [ 0-9 a-f ]+  ),\n    (?<glyph>     .             ),\n    (?<advance>   [ 0-9 ]+      ),\n   \"(?<pathdata>  .*            )\"\n   $ ///u\n\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_cached_outlines = ( me, XXX_target_path ) ->\n  # target_path     = PATH.join me.target_path, content_hash\n  # cache_pattern   = PATH.join me.target_path, '*'\n  validate.fontmirror_existing_folder XXX_target_path\n  cache_pattern   = PATH.join XXX_target_path, '*'\n  cache_paths     = glob.sync cache_pattern\n  #.........................................................................................................\n  # signal SOT:\n  yield { key: '^first', }\n  #.........................................................................................................\n  for cache_path in cache_paths\n    for line from @_walk_file_lines cache_path\n      #.....................................................................................................\n      # yield embedded JSON objects:\n      if line.startsWith '{'\n        yield JSON.parse line\n        continue\n      #.....................................................................................................\n      # silently skip unrecognized lines:\n      unless ( match = line.match line_pattern )?\n        continue\n      #.....................................................................................................\n      # assemble `^outline` datoms for the majority of lines:\n      { cid_hex\n        glyph\n        advance\n        pathdata  } = match.groups\n      yield { key: '^outline', cid_hex, glyph, advance, pathdata, }\n  #.........................................................................................................\n  # signal EOT:\n  yield { key: '^last', }\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_walk_outlines_from_cache_path = ( me, cache_path ) ->\n#   whisper '^fontmirror/cachewalker@343^', \"yielding from cache_path\"\n#   # validate.content_hash content_hash\n#   pipeline        = []\n#   pipeline.push SP.read_from_file cache_path\n#   pipeline.push SP.$split()\n#   pipeline.push $show()\n#   pipeline.push $watch ( d ) -> yield d\n#   pipeline.push $drain =>\n#     whisper '^fontmirror/cachewalker@344^', \"finished with cache_path\"\n#   return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_walk_file_lines = ( path ) ->\n  Readlines = require 'n-readlines'\n  liner     = new Readlines path\n  while line = liner.next()\n    yield line.toString()\n  return null\n\n\n"
  ]
}